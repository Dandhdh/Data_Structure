package Counter.CasCount;import java.util.concurrent.BrokenBarrierException;import java.util.concurrent.CyclicBarrier;public class Test {    public static void main(String[] args) throws BrokenBarrierException, InterruptedException {        final CasCounter casCounter = new CasCounter();        // 循环栏栅        final CyclicBarrier cb = new CyclicBarrier(1001, new Runnable() {            public void run() {                System.out.printf("finalVal : %s \n", casCounter.getValue());            }        });        for (int i = 0; i < 1000; i++) {            new Thread(new Runnable() {                public void run() {                    try {                        cb.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    } catch (BrokenBarrierException e) {                        e.printStackTrace();                    }                    for (int j = 0; j < 10; j++) {                        int curr = casCounter.increment(1);                        System.out.print("");//这行代码会增加冲突概率                    }                    try {                        cb.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    } catch (BrokenBarrierException e) {                        e.printStackTrace();                    }                }            }).start();        }        cb.await();        cb.await();    }}