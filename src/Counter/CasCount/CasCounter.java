package Counter.CasCount;import sun.misc.Unsafe;import java.io.Serializable;  import java.lang.reflect.Field;  // 线程安全的计数器public class CasCounter implements Serializable {    private static Unsafe unsafe;      private static long valueOffset;    static {          try {            // 只能通过发射获取 unsafe 示例            Field field = Unsafe.class.getDeclaredField("theUnsafe");              field.setAccessible(true);     // 取消该field的Java语言访问检查            unsafe = (Unsafe) field.get(Unsafe.class);          } catch (Exception e) {              e.printStackTrace();          }          try {            /**             * 字面意思是属性偏移量，             * 即获取 对象value属性字段的真实存储位置             */            valueOffset = unsafe.objectFieldOffset(CasCounter.class.getDeclaredField("value"));          } catch (NoSuchFieldException e) {              e.printStackTrace();          }      }      private volatile int value;      public CasCounter() {value = 0;}      public CasCounter(int initValue) {this.value = initValue;}        public int getValue() {          return value;      }        public int increment(int incrNum) {//线程安全          while (true) {              int oleVal = value;              int newVal = oleVal + incrNum;              if (unsafe.compareAndSwapInt(this, valueOffset, oleVal, newVal)) {                  return newVal;              }          }      }        public int incrementNo(int incrNum) {//非线程安全          value += incrNum;          return value;      }} 