package Interview_Question;import java.text.DecimalFormat;import java.util.Scanner;/** * 无聊的游戏 * 爱奇艺编程题 * * 牛牛和羊羊非常无聊.他们有n + m个共同朋友,他们中有n个是无聊的,m个是不无聊的。 * 每个小时牛牛和羊羊随机选择两个不同的朋友A和B.(如果存在多种可能的pair(A, B),任意一个被选到的概率相同。), * 然后牛牛会和朋友A进行交谈,羊羊会和朋友B进行交谈。 * 在交谈之后,如果被选择的朋友之前不是无聊会变得无聊。 * 现在你需要计算让所有朋友变得无聊所需要的时间的期望值。 * * 输入描述: * 输入包括两个整数n 和 m(1 ≤ n, m ≤ 50) * * * 输出描述: * 输出一个实数,表示需要时间的期望值,四舍五入保留一位小数。 * 示例1 * 输入 * 2 1 * 输出 * 1.5 *//** * （概率问题） * 参考：https://blog.csdn.net/pure_life/article/details/8100984 * * 考虑思路： * F(n,m)表示n个无聊，m个有聊变为全部无聊期望时间 * 则下一个时间的状态可能为F(n, m)、F(n+1, m-1)、F(n+2, m-2) 对于概率分别为P1、P2、P3 * P1 = n(n-1)/((n+m)(n+m-1)) * P2 = nm/((n+m)(n+m-1)) * P3 = m(m-1)/((n+m)(n+m-1)) * 则： * F(n, m)=p1(F(n, m)+1)+p2(F(n+1, m-1)+1)+p3(F(n+2, m-2)+1) *        =p1*F(n,m)+p2*F(n+1,m-1)+p3*F(n+2,m-2)+1 * 化简得： * (1-p1)F(n,m) = p2*F(n+1,m-1)+p3*F(n+2,m-2)+1 * * 且 F(n+m,0)=0 */public class boringGame {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int m = sc.nextInt();        System.out.println(formatDouble(getF2(n,m)));    }    // 使用递归方法：运行通过率70%，提示时间复杂度过大，    // 可能由于递归创建栈所致    public static double getF(double n, double m){        if (m<=0){            return 0;        }        double total = (n+m)*(n+m-1)/2;        double p1 = n*(n-1)/2 /total;        double p2 = n*m /total;        double p3 = m*(m-1)/2 /total;        return (p2*getF(n+1,m-1)+p3*getF(n+2,m-2)+1)/(1-p1);    }    // 循环的方法实现    public static double getF2(double n, double m){        double s = n+m;        /**         * f0表示F(n+m,0)         * f1表示F(n+m-1,1),         * 因为 F(n,1)=p1*F(n,1)+F(n+1,0)+1,         * 即 f1=F(n,1)=1/p1         */        double f0=0, f1=s/2.0;        for (double k=2; k<=m; k++){            double p = s * (s - 1) / (1.0 * k * (2 * s - k - 1)) + 2 * (s - k) * 1.0 / (2 * s - k - 1) * f1 + (k - 1) * 1.0 / (2 * s - k - 1) * f0;            f0 = f1;            f1 = p;        }        return f1;    }    // 四舍五入保留一位小数    public static String formatDouble(double d){        DecimalFormat df =  new DecimalFormat("#.0");        return df.format(d);    }}