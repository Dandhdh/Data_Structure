package Interview_Question;/** * 求两个字符串的最长公共子串 * * 算法思路： * 1、把两个字符串分别以行和列组成一个二维矩阵。 * 2、比较二维矩阵中每个点对应行列字符中否相等，相等的话值设置为1，否则设置为0。 * 3、通过查找出值为1的最长对角线就能找到最长公共子串。 */public class LCS {    public static void main(String[] args) {        getLCSLength("acbcbcef","abcbced");    }    /**     * 获取两个字符串最长公共子串长度     * @param str    第一个字符串     * @param str2	 第二个字符串     * @return	如果存在则返回最长公共子串长度，否则返回0     */    public static void getLCSLength(String str, String str2){        char[] chars = str.toCharArray();        char[] chars2 = str2.toCharArray();        int len1 = chars.length;        int len2 = chars2.length;        int LCSLength = 0;        //声明一个二维数组，存储最长公共子串长度        int[][] re = new int[len1][len2];        // 初始化二维数组第一列        for (int i=0; i<len1; i++){            if (chars[i]==chars2[0]){                re[i][0] = 1;            }        }        // 初始化二维数组第一行        for (int i=0; i<len2; i++){            if (chars[0]==chars2[i]){                re[0][i] = 1;            }        }        for (int i=1; i<len1; i++){            for (int j=1; j<len2; j++){                if (chars[i]==chars2[j]){                    re[i][j] = 1+re[i-1][j-1];                    LCSLength = LCSLength>re[i][j]?LCSLength:re[i][j];                }            }        }        System.out.println(LCSLength);    }}