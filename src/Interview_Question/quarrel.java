package Interview_Question;import java.util.Scanner;/** *科大讯飞java岗笔试 * * 争吵 * * 题目描述： * 有n?个人排成了一行队列，每个人都有一个站立的方向：面向左或面向右。 * 由于这n?个人中每个人都很讨厌其他的人，所以当两个人面对面站立时，他们会发生争吵，然后其中一个人就会被踢出队列，谁被踢出队列都是有可能的。 * 我们用字符L?来表示一个面向左站立的人，用字符R?来表示一个面向右站立的人，那么这个队列可以用一个字符串描述。 * 比如RLLR?就表示一个四个人的队列，其中第一个人和第二个人是面对面站立的。他们发生争吵后队列可能会变成LLR，也可能变成RLR； * 若变成RLR，则第一个人与第二个人还会发生争吵，队列会进一步变成LR?或者RR。 * * 若在某个时刻同时可能有很多的争吵会发生时，接下来只会发生其中的一个，且任意一个都是有可能发生的。 * * 你想知道经过一系列的争吵后，这个队列最少会剩下多少人？ * * 输入描述 * 第一行包含一个有字符L?和R?构成的字符串。（1 ≤字符串长度≤?10^5） * * 输出描述 * 输出队列中最少会剩下多少人。 * * 样例输入 * LRRLRL * * 样例输出 * 2 *//** * 分析： * 只有当R全都在L的右边时，才不会发生争吵。 * 故找到最左边的R和最右边的L，将位于两者中间的所有元素去除即为不发生争吵的最少人数。 */public class quarrel {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String str = sc.nextLine();        char[] chars = str.toCharArray();        int l = -1;        int r = -1;        for (int i = 0; i<str.length(); i++){            // 找到从左边起第一个'R'的位置            if (chars[i]=='R'){                r = i;                break;            }        }        for (int i=str.length()-1; i>=0; i--){            // 找到从右边起第一个'L'的位置            if (chars[i]=='L'){                l = i;                break;            }        }        System.out.println(str.length() - (l-r));    }}