package Interview_Question;import java.util.Scanner;/** * 最大乘积 * * 拼多多编程题 * * 给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1) * 输入描述: * 第一行是数组大小n，第二行是无序整数数组A[n] * * * 输出描述: * 满足条件的最大乘积 * * 输入例子1: * 4 * 3 4 1 2 * * 输出例子1: * 24 * */public class MaxMulti {    private static Long max1=0L,max2=0L,max3=0L;    private static Long min1=0L,min2=0L;    private static boolean hasZero = false;    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        Long[] nums = new Long[n];        for (int i=0; i<n; i++){            nums[i] = sc.nextLong();        }        assert n>=3;        if (n==3){            System.out.println(nums[0]*nums[1]*nums[2]);            return;        }        for (int i=0; i<n; i++){            if (nums[i]>0){                putMax(nums[i]);            }else if(nums[i]<0){                putMin(nums[i]);            }else {                hasZero = true;            }        }        Long sum1 = (max1*max2*max3);        Long sum2 = max1*min2*min1;        System.out.println(Math.max(sum1,sum2));    }    public static void putMax(Long i){        if(i>max1){            max3 = max2;            max2 = max1;            max1 = i;        }else if(i>max2){            max3 = max2;            max2 = i;        }else if(i>max3){            max3 = i;        }    }    public static void putMin(Long i){        if(i<min1 ){            min2 = min1;            min1 = i;        }else if(i>min1 && i<min2){            min2 = i;        }    }}