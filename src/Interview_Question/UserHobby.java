package Interview_Question;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Scanner;/** * 用户喜好 * * 今日头条编程题 * * 为了不断优化推荐效果，今日头条每天要存储和处理海量数据。 * 假设有这样一种场景：我们对用户按照它们的注册时间先后来标号，对于一类文章，每个用户都有不同的喜好值， * 我们会想知道某一段时间内注册的用户（标号相连的一批用户）中，有多少用户对这类文章喜好值为k。 * 因为一些特殊的原因，不会出现一个查询的用户区间完全覆盖另一个查询的用户区间(不存在L1<=L2<=R2<=R1)。 * * 输入描述: * 输入： 第1行为n代表用户的个数 第2行为n个整数，第i个代表用户标号为i的用户对某类文章的喜好度 第3行为一个正整数q代表查询的组数  第4行到第（3+q）行，每行包含3个整数l,r,k代表一组查询，即标号为l<=i<=r的用户中对这类文章喜好值为k的用户的个数。 数据范围n <= 300000,q<=300000 k是整型 * * * 输出描述: * 输出：一共q行，每行一个整数代表喜好值为k的用户的个数 * * 输入例子1: * 5 * 1 2 3 3 5 * 3 * 1 2 1 * 2 4 5 * 3 5 3 * * 输出例子1: * 1 * 0 * 2 * * 例子说明1: * 样例解释: * 有5个用户，喜好值为分别为1、2、3、3、5， * 第一组询问对于标号[1,2]的用户喜好值为1的用户的个数是1 * 第二组询问对于标号[2,4]的用户喜好值为5的用户的个数是0 * 第三组询问对于标号[3,5]的用户喜好值为3的用户的个数是2 */public class UserHobby {    private static List<Integer> result = new ArrayList<>();    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        HashMap<Integer,List<Integer>> hobby = new HashMap<>();        for (int index=1; index<=n; index++){            int ins = sc.nextInt();            if (!hobby.containsKey(ins)){                List<Integer> list = new ArrayList<>();                list.add(index);                hobby.put(ins,list);            }else {                hobby.get(ins).add(index);            }        }        int m = sc.nextInt();        for (int i=0; i<m; i++){            int offset = sc.nextInt();            int des = sc.nextInt();            int v = sc.nextInt();            search(offset,des,v,hobby);        }        for (Integer i : result){            System.out.println(i);        }    }    public static void search(int offset, int des, int v, HashMap<Integer,List<Integer>> hashMap){        List<Integer> list = hashMap.get(v);        if (list==null || list.isEmpty()){            result.add(0);            return;        }        int count = 0;        for (Integer i : list){            if (offset<=i && i<=des){                count++;            } else if (i>des){                break;            }        }        result.add(count);        return;    }    /**     * 您的代码已保存     * 运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。     * case通过率为50.00%     *///    public static void main(String[] args) {////        Scanner sc = new Scanner(System.in);//        int n = sc.nextInt();//        int[] intrest = new int[n+1];//        for (int i=1; i<1+n; i++){//            intrest[i] = sc.nextInt();//        }//        int m = sc.nextInt();//        for (int i=0; i<m; i++){//            query(sc.nextInt(),sc.nextInt(),sc.nextInt(),intrest);//        }////        for (Integer integer : result){//            System.out.println(integer);//        }//////    }////    public static void query(int offset, int des, int n, int[] arr){//        int count = 0;//        while (offset<des){//            if (arr[offset]==n){//                count++;//            }//            if (arr[des]==n){//                count++;//            }//            offset++;//            des--;//        }//        if (offset==des){//            if (arr[offset]==n){//                count++;//            }//        }//        result.add(count);//    }}