package Interview_Question;import java.util.Scanner;/** * 数三角形 * * 拼多多笔试编程题 * * 给出平面上的n个点，现在需要你求出，在这n个点里选3个点能构成一个三角形的方案有几种。 * * * * 输入描述: * 第一行包含一个正整数n，表示平面上有n个点（n <= 100) * 第2行到第n + 1行，每行有两个整数，表示这个点的x坐标和y坐标。(所有坐标的绝对值小于等于100，且保证所有坐标不同） * * * 输出描述: * 输出一个数，表示能构成三角形的方案数 * * * 输入例子1: * 4 * 0 0 * 0 1 * 1 0 * 1 1 * * 输出例子1: * 4 * * 例子说明1: * 4个点中任意选择3个都能构成三角形 * */public class CountTriangle {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        point[] points = new point[n];        for (int i=0; i<n; i++){            double x = sc.nextDouble();            double y = sc.nextDouble();            points[i] = new point(x,y);        }        solute(points);    }    public static void solute(point[] points){        int count = 0;        int i,j,k=0;        for (i=0; i<points.length-2; i++){            for (j=i+1;j<points.length-1; j++){                for (k=j+1; k<points.length; k++){                    if (isTriangle(points[i],points[j],points[k])){                        count++;                    }                }            }        }        System.out.println(count);    }    public static boolean isTriangle(point a, point b, point c){        Line line1 = new Line(a, b);        Line line2 = new Line(a, c);        Line line3 = new Line(b, c);        if (line1.isParallel(line2) || line1.isParallel(line3) || line2.isParallel(line3)) {            return false;        }        double len1 = line1.getLength();        double len2 = line2.getLength();        double len3 = line3.getLength();        // 任意两边之和大于第三边，任意两边之差小于第三边        if(new Double(len1+len2).compareTo(len3)>0                && new Double(len1+len3).compareTo(len2)>0                && new Double(len3+len2).compareTo(len1)>0                && Math.abs(len1-len2)<len3                && Math.abs(len1-len3)<len2                && Math.abs(len3-len2)<len1 ){            return true;        }        return false;    }    static class point{        private double x;        private double y;        public point(Double x, Double y) {            this.x = x;            this.y = y;        }        public double getX() {            return x;        }        public double getY() {            return y;        }    }    static class Line {        private point point1;        private point point2;        // 斜率        private double slope;        private double length;        public Line(point point1, point point2) {            this.point1 = point1;            this.point2 = point2;            this.slope = (point1.getY() - point2.getY()) / (point1.getX() - point2.getX());            this.length = Math.sqrt(Math.pow(Math.abs(point1.getY() - point2.getY()), 2)                    + Math.pow(Math.abs(point1.getX() - point2.getX()), 2));        }        public double getSlope() {            return slope;        }        public boolean isParallel(Line line) {            if (this.slope == line.getSlope())                return true;            return false;        }        public double getLength() {            return length;        }    }}