package Interview_Question;import org.omg.PortableInterceptor.INACTIVE;import java.util.Arrays;import java.util.Comparator;import java.util.Scanner;/** * 最大差值 * * 吉比特笔试编程题 * * 给定一个未排序的数列，找到此数列在已排序状态下的两个相邻值的最大差值，少于两个值时返回0。例如：给定数列 [1,3,2,0,1,6,8] 则 最大差值为3。注意：请尽量使用时间复杂度为O(n)的方案。 * 输入描述: * 第一行输入单个整数N作为数列的大小，第二行输入所有数列中的元素M，共N个。0 < N <= 1000000, 0 < M < 2100000000 * * * 输出描述: * 数列的最大差值 * * 输入例子1: * 3 * 1 10 5 * * 输出例子1: * 5 * */public class MaxDifference {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        if (n<2){            System.out.println(0);            return;        }        sc.nextLine();        String[] arr = sc.nextLine().split(" ");        Arrays.sort(arr, new Comparator<String>() {            @Override            public int compare(String o1, String o2) {                return Integer.parseInt(o1)-Integer.parseInt(o2);            }        });        long max = 0L;        for (int i=0; i<arr.length-1; i++){            long k = Integer.parseInt(arr[i+1]) - Integer.parseInt(arr[i]);            max = max>k?max:k;        }        System.out.println(max);    }}