package Interview_Question;import java.util.*;/** * * 作为一个手串艺人，有金主向你订购了一条包含n个杂色串珠的手串――每个串珠要么无色，要么涂了若干种颜色。 * 为了使手串的色彩看起来不那么单调，金主要求，手串上的任意一种颜色（不包含无色）， * 在任意连续的m个串珠里至多出现一次（注意这里手串是一个环形）。 * 手串上的颜色一共有c种。现在按顺时针序告诉你n个串珠的手串上，每个串珠用所包含的颜色分别有哪些。 * 请你判断该手串上有多少种颜色不符合要求。即询问有多少种颜色在任意连续m个串珠中出现了至少两次。 * * * 输入描述: * 第一行输入n，m，c三个数，用空格隔开。(1 <= n <= 10000, 1 <= m <= 1000, 1 <= c <= 50) 接下来n行每行的第一个数num_i(0 <= num_i <= c)表示第i颗珠子有多少种颜色。接下来依次读入num_i个数字，每个数字x表示第i颗柱子上包含第x种颜色(1 <= x <= c) * * * 输出描述: * 一个非负整数，表示该手链上有多少种颜色不符需求。 * 示例1 * 输入 * 5 2 3 * 3 1 2 3 * 0 * 2 2 3 * 1 2 * 1 3 * 输出 * 2 * 说明 * 第一种颜色出现在第1颗串珠，与规则无冲突。 * 第二种颜色分别出现在第 1，3，4颗串珠，第3颗与第4颗串珠相邻，所以不合要求。 * 第三种颜色分别出现在第1，3，5颗串珠，第5颗串珠的下一个是第1颗，所以不合要求。 * 总计有2种颜色的分布是有问题的。 * 这里第2颗串珠是透明的。 */public class Bracelets {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int m = sc.nextInt();        int c = sc.nextInt();   // 个人认为这个树枝没有用        sc.nextLine();        HashMap<String,List<Integer>> chain = new HashMap<>();        for (int i=0; i<n; i++){            String[] strs = sc.nextLine().split(" ");            int len = strs.length;            // 由于每行的第一个数值表示，这一个珠子有多少种颜色，没有意义            for(int j=1; j<len; j++){                if (chain.containsKey(strs[j])){                    chain.get(strs[j]).add(i);                }else {                    List<Integer> list = new ArrayList<>();                    list.add(i);                    chain.put(strs[j],list);                }            }        }        int count = 0;        for (Map.Entry<String,List<Integer>> entry : chain.entrySet()){            if ("0".equals(entry.getKey())){                continue;            }            List<Integer> list = entry.getValue();            int len = list.size();            if(len==1){                continue;            }            int init = list.get(0);            boolean result = true;            for (int i=1; i<len; i++){                int tmp = list.get(i);                if (tmp==init){                    continue;                }                if (tmp<(init+m)){                    count++;                    result = false;                    break;                }else {                    init = tmp;                }            }            if (result){                if (list.get(len-1)+m > list.get(0)+n){                    count++;                }            }        }        System.out.println(count);    }}