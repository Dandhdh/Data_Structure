package StringSort;/** * 低位优先的字符串排序 * （字符串左边的是低位） * * 对于：基于R个字符的字母表的N个以长为W的字符串为键的元素 * * 时间复杂度：O(7WN+3WR) * 空间复杂度：O(N+R) */public class LSD {    /**     * 通过前W个字符将arr[]排序     *     * @param arr 待排序的字符串数组     * @param W   依据前W个字符排序     */    public static void sort(String[] arr, int W){        int N = arr.length;        int R = 256;        String[] aux = new String[N];        /**         * 根据第d个字符用 键索引计数法排序         */        for (int d=W-1, k=1 ; d>=0; d--, k++){            // 计算出现的频率            int[] count = new int[R+1];            for (int i=0; i<N; i++){                count[arr[i].charAt(d) +1 ]++;   // 记得加1            }            // 将频率转化成索引            for (int r=0; r<R; r++){                count[r+1]+=count[r];            }            // 将元素分类            for (int i=0; i<N; i++){                aux[count[arr[i].charAt(d)]++] = arr[i];            }            // 回写            for (int i=0; i<N; i++){                arr[i] = aux[i];            }            System.out.print("第"+k+"次排序：");            for (String str : arr){                System.out.print(str+"   ");            }            System.out.println();        }    }    public static void main(String[] args) {        String[] arr = {"sd21sa","fdsg3k","ASdf11","mfEIQo" ,"vfergr","ewwer21","dwdsas","OWNQ3A",        "abcdef","abcdeg","bbcdef"};        sort(arr,4);    }}